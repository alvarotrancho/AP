from node import *

def solve_branch_and_bound_DFS(capacity, items, record_visiting_order = False):
    """"
    :param capacity: capacidad de la mochila
    :param items: items de la mochila
    :param record_visiting_order: activa/desactiva el registro de nodos visitados
    :return: Por ahora sólo devuelve la lista de nodos visitados
    """

    # Completa este código para realizar el recorrido DFS; tienes
    # indicados los sitios que debes completar con tres puntos
    # suspensivos ("...")

    # Utilizamos la lista 'alive' como nuestra pila de nodos vivos
    # (pendientes de visitar) para programar nuestro recorrido DFS.

    alive = []
    
    # Utilizamos la lista Visiting_Order como el registro de nodos
    # visitados (el contenido final de esta lista lo utiliza el VPL
    # para comprobar que nuestro recorrido DFS es correcto).

    visiting_order = []

    # 1) Creamos el nodo raiz.
    # ...

    # Lo añadimos a la lista de nodos vivos (alive)
    # ...

    # Mientras haya nodos en la lista de nodos vivos
    # ...
    # Creamos el primer nodo con valor, taken e índice 0, y la capacidad máxima
    alive.append(Node(0,[],0,capacity))

    # Lo guardamos como un nodo para extraer el taken con más facilidad
    best = Node(0,[],0,0)
    # Mientras haya nodos en la lista de nodos vivos
    # ...
    while len(alive) > 0:
        # Avanzamos al siguiente nodo de nuestro recorrido DFS (hacemos un pop
        # de la lista) y lo registramos en nuestro recorrido DFS.

        current = alive.pop()
        if record_visiting_order:
            visiting_order.append(current.index)

        # Si no hemos llegado al final del árbol
        #    1) Ramificamos (branch) por la derecha (append)
        #    2) Ramificamos (branch) por la izquierda (append)
        # ...
        # Si esto se cumple, estamos en un nodo inválido (espacio negativo) o que no merece la pena (no podemos superar el
        # mejor resultado hasta ahora)
        if not current.room < 0 and not current.estimate(items) < best.value:
            # Si esto se cumple, o hemos llegado al final del árbol o hemos llenado justo la bolsa, en cuyo caso podemos dejar
            # de bajar y evaluar
            if not (current.index == len(items) or current.room == 0):
                # Creamos el nodo a la derecha, sin coger el objeto actual
                alive.append(Node(current.index + 1, current.taken, current.value,current.room))
                # Necesitamos esto para modificar el taken. Recuerda que taken tiene los números de los NODOS
                buffer = current.taken.copy()
                buffer.append(current.index + 1)
                # Creamos el nodo a la izquierda, cogiendo el objeto actual. No comprobamos si es inválido, solo si el nodo
                # actual lo es.
                alive.append(Node(current.index + 1, buffer, current.value + items[current.index].value, current.room - items[current.index].weight))
            else:
                # Comprobamos si es el mejor hasta el momento
                if current.value > best.value:
                    best = current
    return best.value, best.taken, visiting_order
